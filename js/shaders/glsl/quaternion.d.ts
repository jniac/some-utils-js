export declare const glsl_quaternion = "\n\n// From the excellent following:\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n\nvec4 qConj(vec4 q) { \n  return vec4(-q.x, -q.y, -q.z, q.w); \n}\n\nvec4 qFromAxisAngle(vec3 axis, float angle) { \n  vec4 qr;\n  float half_angle = (angle * 0.5);\n  qr.x = axis.x * sin(half_angle);\n  qr.y = axis.y * sin(half_angle);\n  qr.z = axis.z * sin(half_angle);\n  qr.w = cos(half_angle);\n  return qr;\n}\n\nvec4 qMult(vec4 q1, vec4 q2) { \n  vec4 qr;\n  qr.x = (q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y);\n  qr.y = (q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x);\n  qr.z = (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w);\n  qr.w = (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z);\n  return qr;\n}\n\nvec3 qTransform(vec3 v, vec4 q) {\n  return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\n// vec3 rotateByAxisAngle(vec3 v, vec3 axis, float angle) { \n//   vec4 qr = qFromAxisAngle(axis, angle);\n//   vec4 qr_conj = qConj(qr);\n//   vec4 q_pos = vec4(v.x, v.y, v.z, 0.0);\n  \n//   vec4 q_tmp = qMult(qr, q_pos);\n//   qr = qMult(q_tmp, qr_conj);\n  \n//   return vec3(qr.x, qr.y, qr.z);\n// }\n\nvec3 rotateByAxisAngle(vec3 v, vec3 axis, float angle) { \n  vec4 q = qFromAxisAngle(axis, angle);\n  return qTransform(v, q);\n}\n\nvec3 rotateByAxisAngleAroundPoint(vec3 v, vec3 axis, float angle, vec3 point) {\n  return rotateByAxisAngle(v - point, axis, angle) + point;\n}\n";
