export declare const glsl_easings = "\n\n  float _clamp01(float x) {\n    return x < 0.0 ? 0.0 : x > 1.0 ? 1.0 : x;\n  }\n\n  float easeIn1 (float x) {\n    x = _clamp01(x);\n    return x;\n  }\n  float easeIn2 (float x) {\n    x = _clamp01(x);\n    return x * x;\n  }\n  float easeIn3 (float x) {\n    x = _clamp01(x);\n    return x * x * x;\n  }\n  float easeIn4 (float x) {\n    x = _clamp01(x);\n    return x * x * x * x;\n  }\n  float easeIn5 (float x) {\n    x = _clamp01(x);\n    return x * x * x * x * x;\n  }\n  float easeIn6 (float x) {\n    x = _clamp01(x);\n    x *= x * x;\n    return x * x;\n  }\n\n  float easeOut1 (float x) {\n    x = _clamp01(x);\n    return x;\n  }\n  float easeOut2 (float x) {\n    x = _clamp01(x);\n    return 1.0 - (x = 1.0 - x) * x;\n  }\n  float easeOut3 (float x) {\n    x = _clamp01(x);\n    return 1.0 - (x = 1.0 - x) * x * x;\n  }\n  float easeOut4 (float x) {\n    x = _clamp01(x);\n    return 1.0 - (x = 1.0 - x) * x * x * x;\n  }\n  float easeOut5 (float x) {\n    x = _clamp01(x);\n    return 1.0 - (x = 1.0 - x) * x * x * x * x;\n  }\n  float easeOut6 (float x) {\n    x = _clamp01(x);\n    x = 1.0 - x;\n    x *= x * x;\n    return 1.0 - x * x;\n  }\n\n  float easeInout1 (float x) {\n    x = _clamp01(x);\n    return x;\n  }\n  float easeInout2 (float x) {\n    x = _clamp01(x);\n    return x < 0.5 ? 2.0 * x * x : 1.0 - 2.0 * (x = 1.0 - x) * x;\n  }\n  float easeInout3 (float x) {\n    x = _clamp01(x);\n    return x < 0.5 ? 4.0 * x * x * x : 1.0 - 4.0 * (x = 1.0 - x) * x * x;\n  }\n  float easeInout4 (float x) {\n    x = _clamp01(x);\n    return x < 0.5 ? 8.0 * x * x * x * x : 1.0 - 8.0 * (x = 1.0 - x) * x * x * x;\n  }\n  float easeInout5 (float x) {\n    x = _clamp01(x);\n    return x < 0.5 ? 16.0 * x * x * x * x * x : 1.0 - 16.0 * (x = 1.0 - x) * x * x * x * x;\n  }\n  float easeInout6 (float x) {\n    x = _clamp01(x);\n    return x < 0.5 ? 32.0 * x * x * x * x * x * x : 1.0 - 32.0 * (x = 1.0 - x) * x * x * x * x * x;\n  }\n\n  float easeInout(float x, float p, float i) {\n    return  x <= 0.0 ? 0.0 :\n            x >= 1.0 ? 1.0 :\n            x <= i ? 1.0 / pow(i, p - 1.0) * pow(x, p) :\n            1.0 - 1.0 / pow(1.0 - i, p - 1.0) * pow(1.0 - x, p);\n  }\n";
